--DLL de la base de datos de la veterinaria para APEX

--Tabla Usuario

  CREATE TABLE "USUARIO" 
   (	"USUARIO_ID" NUMBER, 
	"ROL" VARCHAR2(50), 
	"CONTRASEÑA" VARCHAR2(255) NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(100) NOT NULL ENABLE, 
	"NOMBRE_USUARIO" VARCHAR2(50) NOT NULL ENABLE, 
	 CHECK (Rol IN ('cliente', 'veterinario', 'administrador')) ENABLE, 
	 PRIMARY KEY ("USUARIO_ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("EMAIL")
  USING INDEX  ENABLE, 
	 UNIQUE ("NOMBRE_USUARIO")
  USING INDEX  ENABLE
   ) ;


--TABLA ADMINISTRADOR

 CREATE TABLE "ADMINISTRADOR" 
   (	"ID_ADMINISTRADOR" NUMBER, 
	"USUARIO_ID" NUMBER NOT NULL ENABLE, 
	"NOMBRE_PILA" VARCHAR2(50), 
	"APELLIDO" VARCHAR2(50), 
	"TELEFONO" VARCHAR2(15), 
	"EMAIL" VARCHAR2(100) NOT NULL ENABLE, 
	 PRIMARY KEY ("ID_ADMINISTRADOR")
  USING INDEX  ENABLE, 
	 UNIQUE ("EMAIL")
  USING INDEX  ENABLE
   ) ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_BEFORE_INSERT_ADMINISTRADOR_ID" 
BEFORE INSERT ON Administrador
FOR EACH ROW
BEGIN
    IF :NEW.ID_ADMINISTRADOR IS NULL THEN
        :NEW.ID_ADMINISTRADOR := seq_id_administrador.NEXTVAL;
    END IF;
END;
/
ALTER TRIGGER "TRG_BEFORE_INSERT_ADMINISTRADOR_ID" ENABLE;




--TABLA VETERINARIO

  CREATE TABLE "VETERINARIO" 
   (	"ID_VETERINARIO" NUMBER, 
	"USUARIO_ID" NUMBER NOT NULL ENABLE, 
	"NOMBRE_PILA" VARCHAR2(50), 
	"APELLIDO" VARCHAR2(50), 
	"ESPECIALIDAD" VARCHAR2(50), 
	"HORARIO_INICIO" TIMESTAMP (6), 
	"HORARIO_FIN" TIMESTAMP (6), 
	"TELEFONO" VARCHAR2(15), 
	"EMAIL" VARCHAR2(100), 
	 PRIMARY KEY ("ID_VETERINARIO")
  USING INDEX  ENABLE
   ) ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "VETERINARIO_BEFORE_INSERT" 
BEFORE INSERT ON VETERINARIO
FOR EACH ROW
BEGIN
   IF :NEW.ID_VETERINARIO IS NULL THEN
      :NEW.ID_VETERINARIO := veterinario_seq.NEXTVAL;
   END IF;
END;
/
ALTER TRIGGER "VETERINARIO_BEFORE_INSERT" ENABLE;



--TABLA DE DUEÑO 

CREATE TABLE "DUEÑO" 
   (	"ID_DUEÑO" NUMBER, 
	"USUARIO_ID" NUMBER NOT NULL ENABLE, 
	"NOMBRE_PILA" VARCHAR2(50), 
	"APELLIDO" VARCHAR2(50), 
	"TELEFONO" VARCHAR2(15), 
	"EMAIL" VARCHAR2(100), 
	"DIRECCION" VARCHAR2(250), 
	 PRIMARY KEY ("ID_DUEÑO")
  USING INDEX  ENABLE, 
	 UNIQUE ("EMAIL")
  USING INDEX  ENABLE
   ) ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "DUEÑO_BEFORE_INSERT" 
BEFORE INSERT ON DUEÑO
FOR EACH ROW
BEGIN
   IF :NEW.ID_DUEÑO IS NULL THEN
      :NEW.ID_DUEÑO := dueño_seq.NEXTVAL;
   END IF;
END;
/
ALTER TRIGGER "DUEÑO_BEFORE_INSERT" ENABLE;




--PACIENTE

  CREATE TABLE "PACIENTE" 
   (	"ID_PACIENTE" NUMBER, 
	"ID_DUEÑO" NUMBER NOT NULL ENABLE, 
	"NOMBRE" VARCHAR2(50), 
	"ESPECIE" VARCHAR2(50), 
	"RAZA" VARCHAR2(30), 
	"EDAD_NUM" NUMBER, 
	"UNIDAD_TIEMPO" VARCHAR2(10), 
	"SEXO" CHAR(1), 
	"PESO" NUMBER(5,2), 
	"DIAGNOSTICO" VARCHAR2(200), 
	 CHECK (Sexo IN ('M', 'F')) ENABLE, 
	 PRIMARY KEY ("ID_PACIENTE")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "PACIENTE" ADD FOREIGN KEY ("ID_DUEÑO")
	  REFERENCES "DUEÑO" ("ID_DUEÑO") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "PACIENTE_BEFORE_INSERT" 
BEFORE INSERT ON PACIENTE
FOR EACH ROW
BEGIN
   IF :NEW.ID_PACIENTE IS NULL THEN
      :NEW.ID_PACIENTE := paciente_seq.NEXTVAL;
   END IF;
END;
/
ALTER TRIGGER "PACIENTE_BEFORE_INSERT" ENABLE;



--PRODUCTO

  CREATE TABLE "PRODUCTO" 
   (	"ID_ITEM" NUMBER, 
	"NOMBRE" VARCHAR2(50) NOT NULL ENABLE, 
	"CANTIDAD" NUMBER, 
	"EXISTENCIA" NUMBER, 
	"ID_ADMINISTRADOR" NUMBER NOT NULL ENABLE, 
	"PRECIO" NUMBER, 
	 CHECK (Cantidad >= 0) ENABLE, 
	 CHECK (Existencia >= 0) ENABLE, 
	 PRIMARY KEY ("ID_ITEM")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "PRODUCTO" ADD FOREIGN KEY ("ID_ADMINISTRADOR")
	  REFERENCES "ADMINISTRADOR" ("ID_ADMINISTRADOR") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_BEFORE_INSERT_PRODUCTO_ID" 
BEFORE INSERT ON Producto
FOR EACH ROW
BEGIN
    IF :NEW.ID_ITEM IS NULL THEN
        :NEW.ID_ITEM := seq_id_item.NEXTVAL;
    END IF;
END;
/
ALTER TRIGGER "TRG_BEFORE_INSERT_PRODUCTO_ID" ENABLE;



--CITA

  CREATE TABLE "CITA" 
   (	"ID_CITA" NUMBER, 
	"ID_VETERINARIO" NUMBER NOT NULL ENABLE, 
	"ID_PACIENTE" NUMBER NOT NULL ENABLE, 
	"ID_DUEÑO" NUMBER NOT NULL ENABLE, 
	"COSTO" NUMBER(8,2), 
	"FECHA" TIMESTAMP (6) NOT NULL ENABLE, 
	"DETALLES" VARCHAR2(200), 
	"DIAGNOSTICO" VARCHAR2(200), 
	"SEGUIMIENTO" VARCHAR2(100), 
	 PRIMARY KEY ("ID_CITA")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "CITA" ADD FOREIGN KEY ("ID_VETERINARIO")
	  REFERENCES "VETERINARIO" ("ID_VETERINARIO") ENABLE;
  ALTER TABLE "CITA" ADD FOREIGN KEY ("ID_PACIENTE")
	  REFERENCES "PACIENTE" ("ID_PACIENTE") ENABLE;
  ALTER TABLE "CITA" ADD FOREIGN KEY ("ID_DUEÑO")
	  REFERENCES "DUEÑO" ("ID_DUEÑO") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_BEFORE_INSERT_CITA_ID" 
BEFORE INSERT ON Cita
FOR EACH ROW
BEGIN
    IF :NEW.ID_CITA IS NULL THEN
        :NEW.ID_CITA := seq_id_cita.NEXTVAL;
    END IF;
END;
/
ALTER TRIGGER "TRG_BEFORE_INSERT_CITA_ID" ENABLE;
   ) ;


--TABLA FACTURA


CREATE TABLE "FACTURA" 
   (	"ID_FACTURA" NUMBER, 
	"ID_ITEM" NUMBER, 
	"ID_CITA" NUMBER, 
	"ID_DUEÑO" NUMBER NOT NULL ENABLE, 
	"TOTAL" NUMBER(10,2) NOT NULL ENABLE, 
	"FECHA" DATE NOT NULL ENABLE, 
	"DESCRIPCION" VARCHAR2(200), 
	 PRIMARY KEY ("ID_FACTURA")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "FACTURA" ADD FOREIGN KEY ("ID_ITEM")
	  REFERENCES "PRODUCTO" ("ID_ITEM") ENABLE;
  ALTER TABLE "FACTURA" ADD FOREIGN KEY ("ID_CITA")
	  REFERENCES "CITA" ("ID_CITA") ENABLE;
  ALTER TABLE "FACTURA" ADD FOREIGN KEY ("ID_DUEÑO")
	  REFERENCES "DUEÑO" ("ID_DUEÑO") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_BEFORE_INSERT_FACTURA" 
BEFORE INSERT ON FACTURA
FOR EACH ROW
DECLARE
  v_id_factura NUMBER;
BEGIN
  -- Generar un nuevo ID utilizando una secuencia
  SELECT SEQ_FACTURA.NEXTVAL INTO v_id_factura FROM dual;
  
  -- Asignar el nuevo ID solo si el campo ID_FACTURA está vacío
  IF :NEW.ID_FACTURA IS NULL THEN
    :NEW.ID_FACTURA := v_id_factura;
  END IF;
END;
/
ALTER TRIGGER "TRG_BEFORE_INSERT_FACTURA" ENABLE;











--DDL de la base de datos de la veterinaria 

-- Tabla Usuario
CREATE TABLE Usuario (
    Usuario_ID INT PRIMARY KEY,
    Rol VARCHAR(50) CHECK (Rol IN ('cliente', 'veterinario', 'administrador')), -- Restringe los roles permitidos
    Contrasena VARCHAR(255) NOT NULL,    -- Aumentado para almacenar un hash de contraseÃ±a
    Email VARCHAR(100) NOT NULL UNIQUE,
    Nombre_Usuario VARCHAR(50) NOT NULL UNIQUE  -- Asegura que el nombre de usuario sea Ãºnico
);


-- Crear la tabla Administrador
CREATE TABLE Administrador (
    ID_Administrador NUMBER PRIMARY KEY,
    Usuario_ID NUMBER NOT NULL,
    Nombre_Pila VARCHAR(50),              -- Cambiado de N_Pila a Nombre_Pila
    Apellido VARCHAR(50),
    Telefono VARCHAR(15),                 -- Ajustado a 15 para nÃºmeros telefÃ³nicos internacionales
    Email VARCHAR(100) NOT NULL UNIQUE,   -- Ajustado a 100 para direcciones de correo largas
    FOREIGN KEY (Usuario_ID) REFERENCES Usuario(Usuario_ID)
);

-- Crear la tabla Veterinario
CREATE TABLE Veterinario (
    ID_Veterinario NUMBER PRIMARY KEY,
    Usuario_ID NUMBER NOT NULL,
    Nombre_Pila VARCHAR(50),              -- Cambiado de N_Pila a Nombre_Pila
    Apellido VARCHAR(50),
    Especialidad VARCHAR(50),
    Horario_Inicio TIMESTAMP,        
    Horario_Fin TIMESTAMP,           
    Telefono VARCHAR(15),                 -- Ajustado para nÃºmeros telefÃ³nicos
    Email VARCHAR(100),                   -- Ajustado para emails mÃ¡s largos
    FOREIGN KEY (Usuario_ID) REFERENCES Usuario(Usuario_ID)
);

-- Crear la tabla Dueno
CREATE TABLE Dueno (
    ID_Dueno NUMBER PRIMARY KEY,
    Usuario_ID NUMBER NOT NULL,
    Nombre_Pila VARCHAR(50),             -- Cambiado de N_Pila a Nombre_Pila
    Apellido VARCHAR(50),
    Telefono VARCHAR(15),                -- Ajustado para nÃºmeros telefÃ³nicos internacionales
    Email VARCHAR(100) UNIQUE,           -- Ajustado para emails largos y definido como UNIQUE
    Direccion VARCHAR(250),              -- Manteniendo 250 para la direcciÃ³n completa
    FOREIGN KEY (Usuario_ID) REFERENCES Usuario(Usuario_ID)
);

-- Crear la tabla Paciente
CREATE TABLE Paciente (
    ID_Paciente NUMBER PRIMARY KEY,
    ID_Dueno NUMBER NOT NULL,
    Nombre VARCHAR(50),
    Especie VARCHAR(50),
    Raza VARCHAR(30),                    -- Aumentado a 30 para razas mÃ¡s largas
    Edad_Num NUMBER,                      -- Dividido en nÃºmero
    Unidad_Tiempo VARCHAR(10),           -- Y unidad de tiempo para claridad (e.g., aÃ±os, meses)
    Sexo CHAR(1) CHECK (Sexo IN ('M', 'F')),  -- Usando CHAR(1) para M/F
    Peso NUMBER(5,2),                     -- Para pesos con decimales
    Diagnostico VARCHAR(200),
    FOREIGN KEY (ID_Dueno) REFERENCES Dueno(ID_Dueno)
);

-- Tabla Cita
CREATE TABLE Cita (
    ID_Cita NUMBER PRIMARY KEY,              -- Usando NUMBER en lugar de INT
    ID_Veterinario NUMBER NOT NULL,
    ID_Paciente NUMBER NOT NULL,
    ID_Dueno NUMBER NOT NULL,
    Seguimiento VARCHAR(200),
    Costo NUMBER(8,2),                       -- DefiniciÃ³n de precisiÃ³n para valores monetarios
    Fecha TIMESTAMP NOT NULL,              -- Fecha y hora especÃ­ficos de la cita
    Diagnostico VARCHAR(200),
    FOREIGN KEY (ID_Veterinario) REFERENCES Veterinario(ID_Veterinario),
    FOREIGN KEY (ID_Paciente) REFERENCES Paciente(ID_Paciente),
    FOREIGN KEY (ID_Dueno) REFERENCES Dueno(ID_Dueno)
);



-- Tabla Detalles
CREATE TABLE Detalle (
    ID_Cita NUMBER NOT NULL,
    ID_Veterinario NUMBER NOT NULL,
    Motivo VARCHAR(200),
    Tratamiento VARCHAR(200),
    Calificacion NUMBER(2,1) CHECK (Calificacion BETWEEN 1 AND 5), -- Asegura un rango de 1 a 5
    PRIMARY KEY (ID_Cita, ID_Veterinario),
    FOREIGN KEY (ID_Cita) REFERENCES Cita(ID_Cita),
    FOREIGN KEY (ID_Veterinario) REFERENCES Veterinario(ID_Veterinario)
);

-- Tabla Producto
CREATE TABLE Producto (
    ID_Item NUMBER PRIMARY KEY,
    Nombre VARCHAR(50) NOT NULL,                   -- AÃ±adido NOT NULL para asegurar un nombre
    Cantidad NUMBER CHECK (Cantidad >= 0),          -- RestricciÃ³n para permitir solo valores no negativos
    Existencia NUMBER CHECK (Existencia >= 0),      -- RestricciÃ³n para evitar valores negativos en existencia
    ID_Administrador NUMBER NOT NULL,
    FOREIGN KEY (ID_Administrador) REFERENCES Administrador(ID_Administrador)
);

-- Tabla Factura
CREATE TABLE Factura (
    ID_Factura NUMBER PRIMARY KEY,
    ID_Item NUMBER,                             -- Puede ser NULL si la factura no siempre requiere un producto
    ID_Cita NUMBER,                             -- Puede ser NULL si la factura no siempre requiere una cita
    ID_Dueno NUMBER NOT NULL,
    Total NUMBER(10,2) NOT NULL,                -- Definido con precisiÃ³n para valores monetarios
    Fecha DATE NOT NULL,                        -- Asegura que siempre se registre la fecha de la factura
    Descripcion VARCHAR(200),
    FOREIGN KEY (ID_Item) REFERENCES Producto(ID_Item),
    FOREIGN KEY (ID_Cita) REFERENCES Cita(ID_Cita),
    FOREIGN KEY (ID_Dueno) REFERENCES Dueno(ID_Dueno)
);

--Tabla Valoracion
CREATE TABLE Valoracion (
    ID_Valoracion NUMBER PRIMARY KEY,
    ID_Cita NUMBER NOT NULL,
    ID_Veterinario NUMBER NOT NULL, 
    Calificacion NUMBER(2,1) CHECK (Calificacion BETWEEN 1and 5),
    Comentario VARCHAR(255),
    FOREIGN KEY (ID_Cita, ID_Veterinario) REFERENCES Detalles(ID_Cita, ID_Veterinario)
);

---------------------------------------------------------------------------------------------------------------------------------------
						Tablas que ocupe para la creacion de usuarios
---------------------------------------------------------------------------------------------------------------------------------------

  CREATE TABLE "MTL_CITY" 
   (	"ID" NUMBER, 
	"CITY" VARCHAR2(255), 
	"STATE_ID" NUMBER, 
	"COUNTRY_ID" NUMBER, 
	 CONSTRAINT "MTL_CITY_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MTL_ROLE" 
   (	"ROLE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ROLE_NAME" VARCHAR2(255 CHAR) NOT NULL ENABLE, 
	"ROLE_DESC" VARCHAR2(1000 CHAR), 
	 CONSTRAINT "MTL_ROLE_PK" PRIMARY KEY ("ROLE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MTL_USER" 
   (	"USER_ID" NUMBER NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(255), 
	"PASSWORD" VARCHAR2(2000), 
	"VERIFICATION_CODE" VARCHAR2(255), 
	"ROLE_ID" NUMBER, 
	"REFER_URL" VARCHAR2(1000), 
	"REFER_USER_ID" NUMBER, 
	"POINTS" NUMBER, 
	"FIRST_NAME" VARCHAR2(100), 
	"LAST_NAME" VARCHAR2(100), 
	"ADDRESS1" VARCHAR2(255), 
	"ADDRESS2" VARCHAR2(255), 
	"CITY" VARCHAR2(100), 
	"STATEZIP" VARCHAR2(100), 
	 CONSTRAINT "MTL_USER_PK" PRIMARY KEY ("USER_ID")
  USING INDEX  ENABLE
   ) ;
